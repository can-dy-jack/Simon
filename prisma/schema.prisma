generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id
  username              String          @unique
  avatar                String?
  cover                 String?
  name                  String?
  surname               String?
  description           String?
  city                  String?
  school                String?
  work                  String?
  website               String?
  createAt              DateTime        @default(now())
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  follower              Follower[]      @relation("UserFollowers")
  following             Follower[]      @relation("UserFollowings")
  followRequestSender   FollowRequest[] @relation("FollowRequestSender")
  followRequestReceiver FollowRequest[] @relation("FollowRequestReceiver")
  blocker               Block[]         @relation("Blocker")
  blocked               Block[]         @relation("Blocked")
  stories               Stories[]
}

model Post {
  id       Int       @id @default(autoincrement())
  desc     String
  img      String?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  likes    Like[]
  comments Comment[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  desc     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  likes    Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createAt    DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createAt   DateTime @default(now())
  sender     User     @relation("FollowRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("FollowRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  blocker   User     @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Stories {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now())
  expiresAt DateTime
  img       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
